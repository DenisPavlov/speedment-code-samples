package com.company.speedment.orm.test.hare.db0.hares.carrot;

import com.company.speedment.orm.test.hare.db0.hares.hare.Hare;
import com.company.speedment.orm.test.hare.db0.hares.hare.HareField;
import com.company.speedment.orm.test.hare.db0.hares.hare.HareManager;
import com.speedment.core.core.entity.Entity;
import com.speedment.core.core.manager.metaresult.MetaResult;
import com.speedment.core.exception.SpeedmentException;
import com.speedment.util.json.Json;
import java.lang.Integer;
import java.util.Objects;
import java.util.Optional;
import java.util.function.Consumer;
import java.util.stream.Stream;
import javax.annotation.Generated;

/**
 * An interface representing an entity (for example, a row) in the Table 'hare.db0.hares.carrot'.
 * <p>
 * This Class or Interface has been automatically generated by Speedment.
 * Any changes made to this Class or Interface will be overwritten.
 * 
 * @author Speedment 
 */
@Generated("Speedment")
@Entity(managerType = CarrotManager.class,
        builderType = CarrotBuilder.class,
        primaryKeyType = Integer.class)
public interface Carrot {
    
    Integer getId();
    
    Optional<String> getName();
    
    Integer getOwner();
    
    Optional<Integer> getRival();
    
    default Hare findOwner() {
        return HareManager.get().stream()
            .filter(HareField.ID.equal(getOwner()))
            .findAny().orElseThrow(() -> new SpeedmentException(
                "Foreign key constraint error. Hare is set to " + getOwner()
                ));
            
    }
    
    default Optional<Hare> findRival() {
        return getRival()
            .flatMap(hare -> HareManager.get().stream()
                .filter(HareField.ID.equal(hare))
                .findAny()
            );
    }
    
    static CarrotBuilder builder() {
        return CarrotManager.get().builder();
    }
    
    default CarrotBuilder toBuilder() {
        return CarrotManager.get().toBuilder(this);
    }
    
    default String toJson() {
        return CarrotManager.get().toJson(this);
    }
    
    default String toJson(Json<Carrot> json) {
        return json.build(this);
    }
    
    static Stream<Carrot> stream() {
        return CarrotManager.get().stream();
    }
    
    default Optional<Carrot> persist() {
        return CarrotManager.get().persist(this);
    }
    
    default Optional<Carrot> update() {
        return CarrotManager.get().update(this);
    }
    
    default Optional<Carrot> remove() {
        return CarrotManager.get().remove(this);
    }
    
    default Optional<Carrot> persist(Consumer<MetaResult<Carrot>> listener) {
        return CarrotManager.get().persist(this, listener);
    }
    
    default Optional<Carrot> update(Consumer<MetaResult<Carrot>> listener) {
        return CarrotManager.get().update(this, listener);
    }
    
    default Optional<Carrot> remove(Consumer<MetaResult<Carrot>> listener) {
        return CarrotManager.get().remove(this, listener);
    }
}