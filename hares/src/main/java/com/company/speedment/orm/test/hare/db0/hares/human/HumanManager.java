package com.company.speedment.orm.test.hare.db0.hares.human;

import com.speedment.core.config.model.Column;
import com.speedment.core.config.model.Table;
import com.speedment.core.core.manager.sql.SqlManager;
import com.speedment.core.platform.Platform;
import com.speedment.core.platform.component.ManagerComponent;
import com.speedment.core.platform.component.ProjectComponent;
import java.lang.IllegalArgumentException;
import java.lang.Integer;
import java.lang.String;
import javax.annotation.Generated;

/**
 * A manager representing an entity (for example, a row) in the Table 'hare.db0.hares.human'.
 * <p>
 * This Class or Interface has been automatically generated by Speedment.
 * Any changes made to this Class or Interface will be overwritten.
 * 
 * @author Speedment 
 */
@Generated("Speedment")
public interface HumanManager extends SqlManager<Integer, Human, HumanBuilder> {
    
    @Override
    default Integer primaryKeyFor(Human entity) {
        return entity.getId();
    }
    
    @Override
    default Table getTable() {
        return Platform.get().get(ProjectComponent.class).getProject().findTableByName("db0.hares.human");
    }
    
    @Override
    default Class<HumanManager> getManagerClass() {
        return HumanManager.class;
    }
    
    @Override
    default Class<Human> getEntityClass() {
        return Human.class;
    }
    
    @Override
    default Class<HumanBuilder> getBuilderClass() {
        return HumanBuilder.class;
    }
    
    @Override
    default Object get(Human entity, Column column) {
        switch (column.getName()) {
            case "id" : return entity.getId();
            case "name" : return entity.getName();
            default : throw new IllegalArgumentException("Unknown column '" + column.getName() + "'.");
        }
    }
    
    @Override
    default void set(HumanBuilder entity, Column column, Object value) {
        switch (column.getName()) {
            case "id" : entity.setId((Integer) value); break;
            case "name" : entity.setName((String) value); break;
            default : throw new IllegalArgumentException("Unknown column '" + column.getName() + "'.");
        }
    }
    
    @SuppressWarnings("unchecked")
    static HumanManager get() {
        return Platform.get().get(ManagerComponent.class).manager(HumanManager.class);
    }
}