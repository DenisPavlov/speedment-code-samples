package com.company.speedment.orm.test.hello.db0.hellospeedment;

import com.speedment.orm.config.model.Column;
import com.speedment.orm.config.model.Table;
import com.speedment.orm.core.manager.Manager;
import com.speedment.orm.platform.Platform;
import com.speedment.orm.platform.component.ManagerComponent;
import com.speedment.orm.platform.component.ProjectComponent;
import java.lang.IllegalArgumentException;
import java.util.Arrays;
import java.util.List;
import javax.annotation.Generated;

/**
 * A manager representing an entity (for example, a row) in the Table 'hello.db0.hellospeedment.transition'.
 * <p>
 * This Class or Interface has been automatically generated by Speedment.
 * Any changes made to this Class or Interface will be overwritten.
 * 
 * @author Speedment 
 */
@Generated("Speedment")
public interface TransitionManager extends Manager<List<Integer>, Transition, TransitionBuilder> {
    
    @Override
    default List<Integer> primaryKeyFor(Transition entity) {
        return Arrays.asList(entity.getTo(), entity.getFrom());
    }
    
    @Override
    default Table getTable() {
        return Platform.get().get(ProjectComponent.class).getProject().findTableByName("hello.db0.hellospeedment");
    }
    
    @Override
    default Class<TransitionManager> getManagerClass() {
        return TransitionManager.class;
    }
    
    @Override
    default Class<Transition> getEntityClass() {
        return Transition.class;
    }
    
    @Override
    default Class<TransitionBuilder> getBuilderClass() {
        return TransitionBuilder.class;
    }
    
    @Override
    default Object get(Transition entity, Column column) {
        switch (column.getName()) {
            case "to" : return entity.getTo();
            case "from" : return entity.getFrom();
            default : throw new IllegalArgumentException("Unknown column '" + column.getName() + "'.");
        }
    }
    
    @SuppressWarnings("unchecked")
    static TransitionManager get() {
        return (TransitionManager) Platform.get().get(ManagerComponent.class).manager(TransitionManager.class);
    }
}