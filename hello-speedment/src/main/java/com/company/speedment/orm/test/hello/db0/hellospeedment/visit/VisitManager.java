package com.company.speedment.orm.test.hello.db0.hellospeedment.visit;

import com.speedment.orm.config.model.Column;
import com.speedment.orm.config.model.Table;
import com.speedment.orm.core.manager.sql.SqlManager;
import com.speedment.orm.platform.Platform;
import com.speedment.orm.platform.component.ManagerComponent;
import com.speedment.orm.platform.component.ProjectComponent;
import java.lang.IllegalArgumentException;
import java.lang.Integer;
import java.lang.String;
import java.sql.Timestamp;
import javax.annotation.Generated;

/**
 * A manager representing an entity (for example, a row) in the Table 'hello.db0.hellospeedment.visit'.
 * <p>
 * This Class or Interface has been automatically generated by Speedment.
 * Any changes made to this Class or Interface will be overwritten.
 * 
 * @author Speedment 
 */
@Generated("Speedment")
public interface VisitManager extends SqlManager<Integer, Visit, VisitBuilder> {
    
    @Override
    default Integer primaryKeyFor(Visit entity) {
        return entity.getId();
    }
    
    @Override
    default Table getTable() {
        return Platform.get().get(ProjectComponent.class).getProject().findTableByName("db0.hellospeedment.visit");
    }
    
    @Override
    default Class<VisitManager> getManagerClass() {
        return VisitManager.class;
    }
    
    @Override
    default Class<Visit> getEntityClass() {
        return Visit.class;
    }
    
    @Override
    default Class<VisitBuilder> getBuilderClass() {
        return VisitBuilder.class;
    }
    
    @Override
    default Object get(Visit entity, Column column) {
        switch (column.getName()) {
            case "id" : return entity.getId();
            case "time" : return entity.getTime();
            case "user" : return entity.getUser();
            case "image" : return entity.getImage();
            default : throw new IllegalArgumentException("Unknown column '" + column.getName() + "'.");
        }
    }
    
    @Override
    default void set(VisitBuilder entity, Column column, Object value) {
        switch (column.getName()) {
            case "id" : entity.setId((Integer) value); break;
            case "time" : entity.setTime((Timestamp) value); break;
            case "user" : entity.setUser((Integer) value); break;
            case "image" : entity.setImage((String) value); break;
            default : throw new IllegalArgumentException("Unknown column '" + column.getName() + "'.");
        }
    }
    
    @SuppressWarnings("unchecked")
    static VisitManager get() {
        return Platform.get().get(ManagerComponent.class).manager(VisitManager.class);
    }
}